<?xml version="1.0" encoding="UTF-8" ?>

<schema name="beta1.5" version="1.1">

  <types>

     <!-- The StrField type is not analyzed, but indexed/stored verbatim.  
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters). -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->


    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries, since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>


    <!-- Numeric field types that manipulate the value into
         a string value that isn't human-readable in its internal form,
         but with a lexicographic ordering the same as the numeric ordering,
         so that range queries work correctly. -->
    <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>


    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime 
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...
	 
	 NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.
      -->
    <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars.
				This will use to analyze field such as url, label, class, ontology, etc.
        -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">


      <analyzer type="index">
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
	
  	  <!-- filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/ -->
	  <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrement="true"/>
	  <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
	  <filter class="solr.LowerCaseFilterFactory"/>
	  <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>

      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>

	<!-- filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/ -->
	    <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrement="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
	    <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>

    </fieldType>

    <!-- since fields of this type are by default not stored or indexed, any data added to 
         them will be ignored outright 
     --> 
    <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" /> 

    <fieldtype name="textSpell" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
        <analyzer type="index">
	    <tokenizer class="solr.StandardTokenizerFactory"/>
	    <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
	    <filter class="solr.LowerCaseFilterFactory"/>
	    <filter class="solr.StandardFilterFactory"/>
        </analyzer>

	<analyzer type="query">
	    <tokenizer class="solr.StandardTokenizerFactory"/>
	    <!-- filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expan="true"/ -->
	    <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
	    <filter class="solr.LowerCaseFilterFactory"/>
	    <filter class="solr.StandardFilterFactory"/>	
	</analyzer>
    </fieldtype>

 </types>


 <fields>
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a previously defined type from the <types> section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     compressed: [false] if this field should be stored using gzip compression
       (this will only apply if the field type is compressable; among
       the standard field types, only TextField and StrField are)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms./
     termVectors: [false] set to true to store the term vector for a given field.
       When using MoreLikeThis, fields used for similarity should be stored for 
       best performance.
   -->

   <!-- Entity fields. -->
   <field name="hasUri" type="string" indexed="true" stored="true" multiValued="false" required="true" omitNorms="true"/>
   <field name="wasStoredAt" type="date" indexed="true" stored="true" default="NOW" multiValued="false" required="true" omitNorms="true"/>
   <field name="isAttachedTo" type="string" indexed="true" stored="true" multiValued="true" required="false" omitNorms="true"/>   
   <field name="fromSource" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="fromSourceText__" type="text" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="ofMimeType" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="ofEntityType" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="hasTitle" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="hasTitleText__" type="text" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="withReferenceId" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="withReferenceIdText__" type="text" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="withIssue" type="slong" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="withRevision" type="slong" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="isPartOf" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>   
   <field name="hasPart" type="string" indexed="true" stored="true" multiValued="true" required="false" omitNorms="true"/>
   <field name="withRawText" type="text" indexed="true" stored="true" multiValued="false" required="false"/>
   <field name="withAttachedLog" type="text" indexed="true" stored="true" multiValued="true" required="false"/>

   <!-- Synonym fields. -->
   <field name="hasRootValue" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="hasState" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
   <field name="ofCategory" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>

   <!-- Taxonomy fields. -->
	<field name="parentEntity" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>
	<field name="childEntity" type="string" indexed="true" stored="true" multiValued="false" required="false" omitNorms="true"/>  

   <!-- Catch all field for tailoring. --> 
	<dynamicField name="*_s" type="string" indexed="true" stored="true" multiValued="true" required="false" omitNorms="true"/>
   	<dynamicField name="*_t" type="text" indexed="true" stored="true" multiValued="true" required="false" omitNorms="true"/>
   	<dynamicField name="*_t__" type="text" indexed="true" stored="true" multiValued="true" required="false" omitNorms="true"/>
	
   <!-- spell__ and autocomplete. Field for spell checking. Copy field from a number of other fields. -->
   <field name="spell__" type="textSpell" indexed="true" stored="true" multiValued="true"/>

 </fields>

<!-- Copy fields used for search optimization. -->
<copyField source="hasTitle" dest="hasTitleText__"/>
<copyField source="hasTitle" dest="spell__"/>
<copyField source="hasTitleText__" dest="spell__"/>
<copyField source="ofMimeType" dest="spell__"/>
<copyField source="ofEntityType" dest="spell__"/>
<copyField source="hasState" dest="spell__"/>
<copyField source="withRawText" dest="spell__"/>
<copyField source="hasRootValue" dest="spell__"/>
<copyField source="fromSource" dest="fromSourceText__"/>
<copyField source="fromSource" dest="spell__"/>
<copyField source="fromSourceText__" dest="spell__"/>
<copyField source="withReferenceId" dest="withReferenceIdText__"/>
<copyField source="withReferenceId" dest="spell__"/>
<copyField source="withReferenceIdText__" dest="spell__"/>
<copyField source="parentEntity" dest="spell__"/>
<copyField source="childEntity" dest="spell__"/>

<copyField source="*_s" dest="*_t__"/>
<copyField source="*_t__" dest="spell__"/>



<!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>hasUri</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>withRawText</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="AND"/>

 <!-- Similarity is the scoring routine for each document vs. a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <similarity class="org.apache.lucene.search.DefaultSimilarity"/>

</schema>
